# Decentralized Exchange (DEX) Project

This project contains smart contracts and scripts for deploying a decentralized exchange (DEX) on Ethereum-compatible blockchains.

---

## Overview

This project guides you through creating and deploying your own ERC-20 tokens, setting up a liquidity pool via factory and router contracts, adding liquidity, and enabling token trading on a decentralized exchange.

---

## Prerequisites

- Node.js and npm
- Solidity compiler (`solc`) or a development framework (Hardhat or Truffle)
- Ethereum wallet (e.g., MetaMask)
- Deployment tool (e.g., Hardhat, Truffle, Remix)

---

## Steps to Create a Token

1. **Write or Use an ERC-20 Token Contract**

   Use a standard ERC-20 contract or customize your own with your desired name, symbol, and initial supply.

2. **Compile the Token Contract**

   Compile your contract using Solidity compiler or frameworks like Hardhat or Truffle.

3. **Deploy the Token Contract**

   Deploy the compiled contract to your target network (local, testnet, or mainnet).

4. **Save the deployed contract address for later use.**

---

## Steps to Create a Liquidity Pool

1. **Deploy the DEX Router and Factory Contracts**

   Deploy the Factory contract first, then the Router contract, passing the Factory’s address and the wrapped native token address (e.g., WETH).

2. **Create a Pair (Liquidity Pool) for Two Tokens**

   Use the factory contract’s `createPair` function with the addresses of the two tokens to pool. Retrieve the pair contract address afterward.

3. **Add Liquidity to the Pool**

   Approve the router contract to spend your tokens, then call the router’s `addLiquidity` function specifying token addresses, amounts, recipient, and deadline.

4. **Verify Pool Creation**

   Confirm the pair contract address via the factory and start trading tokens using the router.

---

## Example Workflow

1. Deploy two ERC-20 tokens (e.g., TokenA and TokenB).
2. Deploy the DEX router and factory contracts.
3. Create a liquidity pool for TokenA and TokenB.
4. Add liquidity to the pool.
5. Start trading!

---

## Notes & Best Practices

- Always test on local or public testnets before mainnet deployment.
- Review all smart contract code for security vulnerabilities.
- Approve tokens for spending before adding liquidity or swapping.
- Use reasonable deadlines in transactions to avoid failures.
- Monitor gas usage and adjust gas limits as needed.
- Consider security audits for production-ready contracts.

---

## Resources

- OpenZeppelin Contracts
- Uniswap V2 Documentation
- Hardhat
- Truffle
- Remix IDE

